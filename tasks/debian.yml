

# Install everything
- name: Install dns packages
  apt:
    name: "{{ item }}"
  with_items:
    - bind9
    - bind9utils
    - dnsutils


# Create folder structure
- name: "Create all needed bind9 directories"
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ named_config_path }}/rndc_keys"
    - "{{ named_config_path }}/views"
    - "{{ named_config_path }}/zones"
    - "{{ named_config_path }}/reversed_zones"


# Logging
- name: Create logging directory
  file:
    path: "{{ named_default_log_path }}"
    state: directory
    owner: "{{ named_user }}"
    group: "{{ named_user }}"
    mode: 755

- name: Configure logging
  template:
    src: logging.conf.j2
    dest: "{{ named_config_path }}/logging.conf"
  notify: restart named


# Rndc keys setup
- name: Register rndc-key
  shell: |
    rndc-confgen | grep -i secret | grep -v "#" | cut -d "\"" -f 2
  register: rndc_key

- name: Debug rndc_key
  debug:
    msg: "rndc_key: {{ rndc_key.stdout_lines }}"

- name: Put generated keys in the file
  shell: |
    echo {{ rndc_key.stdout_lines }} > {{ named_config_path }}/rndc_keys/rndc.key


# Configure named.conf
- name: Configure named.conf
  template:
    src: named.conf.j2
    dest: "{{ named_config_path }}/named.conf"
    mode: 0644
  notify: restart named


# example
# https://www.techbeatly.com/2018/07/ansible-nested-loop-with-list-and-dictionary.html/
- name: Debug dns records per network per domain
  debug:
    msg:
      - "domain = {{ item.0.domain }}"
      - "network = {{ item.1.name }}"
      - "dns_records = {{ item.1.dns_records }}"
  with_subelements:
    - "{{ dns_zones }}"
    - networks


# Configure Views 
- name: Configure views for each vlan
  template:
    src: view.conf.j2
    dest: "{{ named_config_path }}/views/view_vlan_{{ item.1.vlan_tag }}.conf"
  with_subelements:
    - "{{ dns_zones }}"
    - networks
  notify: restart named

# Configure zonefiles + Reversed zone files
- name: Configure domain zone file
  template:
    src: "zones/db.domain.j2"
    dest: "{{ named_config_path }}/zones/db.{{ item.0.domain }}"
  with_subelements:
    - "{{ dns_zones }}"
    - networks
  notify: restart named

- name: Configure zones files for each vlan network
  template:
    src: "zones/db.vlan_x.domain.j2"
    dest: "{{ named_config_path }}/zones/db.vlan_{{ item.1.vlan_tag }}.{{ item.0.domain }}"
  with_subelements:
    - "{{ dns_zones }}"
    - networks
  notify: restart named

- name: Configure reversed zones files for each vlan network
  template:
    src: "reversed_zones/db.vlan_x.reversed.j2"
    dest: "{{ named_config_path }}/reversed_zones/db.vlan_{{ item.1.vlan_tag }}.reversed"
  with_subelements:
    - "{{ dns_zones }}"
    - networks
  notify: restart named


- name: Set correct user and group on configurations
  file:
    path: "{{named_config_path}}"
    state: directory
    recurse: yes
    owner: "{{named_user}}"
    group: "{{named_user}}"


# # Configure blacklist
# - name: Configure blacklist
#   template:
#     src: blacklist.conf.j2
#     dest: "{{ named_config_path }}/blacklist.conf"
#   when: named_blacklist is defined
  # notify: restart named